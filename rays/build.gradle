buildscript {
	ext { springBootVersion = '2.0.4.RELEASE' }
	repositories { mavenCentral() }
	dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") }
}

plugins {
	id 'com.palantir.docker' version '0.20.1' apply false
	id 'com.palantir.docker-compose' version '0.20.1'
}

group = 'org.snowjak'
version = '0.1.0'
wrapper { gradleVersion = 4.8 }

allprojects {
	apply plugin: 'eclipse'
	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	
	sourceCompatibility = 10
}

subprojects { p ->
	
	if( p.name != "core" ) {
		
		if(p.name != "spectrum-generator") {
			apply plugin: 'org.springframework.boot'
			apply plugin: 'com.palantir.docker'
		}
		
		clean.delete << file('data/')
		
		task copyCoreData(type: Copy) {
			from project(":core").file( "data/")
			into p.file("data/")
			duplicatesStrategy = 'include'
		}
		processResources.dependsOn( copyCoreData )
		
		dependencies { compile project(":core") }
		
		clean.dependsOn( project(":core").clean )
		test.dependsOn( project(":core").test )
	}
	
	repositories {
		mavenCentral()
		jcenter()
	}
	
	test.ignoreFailures = true
}

task allTests(type: TestReport) {
	group = "Verification"
	description = "Gathers the output from all subproject 'test' tasks"
	destinationDir = file("$buildDir/reports/allTests/")
	
	dependsOn subprojects.collect( { it.tasks.withType(Test) } ).flatten()
	reportOn subprojects.collect( { it.tasks.withType(Test) } ).flatten()
}

clean.delete << file('build/docker-compose.yml.template.expanded')

task expandDockerComposeTemplate(type: Copy, dependsOn: 'processResources') {
	from project.file( "docker-compose.yml.template" )
	expand( project.properties )
	into project.file( "./build" )
	rename { "docker-compose.yml.template.expanded" }
	
	mustRunAfter "processResources"
}

dockerCompose {
	template project.file( "build/docker-compose.yml.template.expanded" )
}

generateDockerCompose { dependsOn "expandDockerComposeTemplate" }