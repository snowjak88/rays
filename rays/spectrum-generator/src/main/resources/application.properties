#
# Generator-type to execute.
# Available: see (spectrum-generator.available-generators)
generator-type=STOCHASTIC
#
# Number of points in the tabulated SPD
bins=32
#
# Spectra-names to generate SPDs for
# Available: see (spectrum-generator.available-colors)
colors=white,red,green,blue,cyan,magenta,yellow
#
# When calculating SPD-distance, we will use this color-model.
# Available: srgb, rgb, xyz
color-model=srgb
#
# Target distance (i.e., fitness)
# Generated SPD must have a sum of squared differences (between their resulting
# and the target color, using the specified color-model) less than this value
# to be "good enough".
distance=5e-5
#
# Target bumpiness
# Generated SPD must have an average difference between adjacent points
# less than this value to be "good enough".
bumpiness=5e-5
#
# How many threads are allowed to execute simultaneously.
parallelism=4
#
# Minimum-energy to allow in any SPD (in W*nm). (To be physically-based, 0.0)
min-energy=0.0
#
# Maximum-energy to allow in any SPD (in W*nm)
max-energy=0.02
#
# SPD we begin processing with.
# Available: (blank) (randomized)
#            RANDOM (randomized)
#            D65 (standard illuminator)
#            {}  (load SPD for current color, if exists)
#            [color-name] (load SPD for named color, if exists)
starting-spd={}
#
# Where final SPD should be written.
# Available: see (spectrum-generator.available-outputs)
output=FILE

#
# BRUTE-FORCE Configuration
#
# Search step-size.
# When playing with a point on the SPD,
# we can vary it by this much up or down.
brute-force.search-step=0.0001
#
# Search window-size.
# How much we can vary any point on the SPD by..
brute-force.search-window=0.01

#
# STOCHASTIC Configuration
#
# Our population-size will be maintained at this number of individuals.
stochastic.generation-size=2048
#
# We will process at least this many generations.
stochastic.min-generations=4
#
# We will process at most this many generations.
stochastic.max-generations=4096
#
# The N best individuals in any generation will always persist into
# the next generation.
stochastic.elite-persistence=128
#
# Any individual undergoing reproduction has this chance of mutating
# one of its points to a random value.
stochastic.mutation=0.15
#
# When mutation occurs, the mutated point may be reset to any value
# within (current-value) +/- (mutation-window)
stochastic.mutation-window=1e-4
#
# Any individual undergoing reproduction has this chance of undergoing
# crossover.
stochastic.crossover=0.9
#
# When considering individuals for reproduction, this many individuals
# are randomly selected for a tournament to ultimately perform a single
# reproduction.
stochastic.reproducer-pool-size=16
#
# At periodic intervals, new individuals are injected into the population.
stochastic.new-member-seed=32
#
# New individuals are injected into the population every N generations.
# These new individuals are initialized using (starting-spd).
stochastic.new-member-seed-interval=16

#
# UNIFORM Configuration
#
# We will allow the search-method to perform a maximum of N iterations per color.
uniform.max-iterations=24

#
#
#
#
#

spectrum-generator.available-outputs=FILE,CONSOLE
spectrum-generator.available-generators=VIEW,STOCHASTIC,BRUTE-FORCE,UNIFORM
spectrum-generator.available-colors=white,red,green,blue,cyan,magenta,yellow
spectrum-generator.colorDefinitions[white]=1,1,1
spectrum-generator.colorDefinitions[red]=1,0,0
spectrum-generator.colorDefinitions[green]=0,1,0
spectrum-generator.colorDefinitions[blue]=0,0,1
spectrum-generator.colorDefinitions[cyan]=0,1,1
spectrum-generator.colorDefinitions[magenta]=1,0,1
spectrum-generator.colorDefinitions[yellow]=1,1,0
